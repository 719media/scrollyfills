{"version":3,"file":"scrollyfills.modern.js","sources":["../src/scrollend.js"],"sourcesContent":["const supported = \"onscrollend\" in window\n\nif (!supported) {\n  const scrollendEvent = new Event('scrollend');\n\n  // Map of scroll-observed elements.\n  let observed = new WeakMap();\n\n  // Forward and observe calls to a native method.\n  function observe(proto, method, handler) {\n    let native = proto[method];\n    proto[method] = function() {\n      let args = Array.prototype.slice.apply(arguments, [0]);\n      native.apply(this, args);\n      args.unshift(native);\n      handler.apply(this, args);\n    }\n  }\n  \n  function onAddListener(originalFn, type, handler, options) {\n    // Polyfill scrollend event on any element for which the developer listens\n    // to 'scrollend' explicitly or 'scroll' (so that adding a scrollend listener\n    // from within a scroll listener works).\n    if (type != 'scroll' && type != 'scrollend')\n      return;\n\n    let scrollport = this;\n    let data = observed.get(scrollport);\n    if (data === undefined) {\n      let timeout = 0;\n      data = {\n        scrollListener: (evt) => {\n          clearTimeout(timeout);\n          timeout = setTimeout(() => {\n            scrollport.dispatchEvent(scrollendEvent);\n            timeout = 0;\n          }, 100);\n        },\n        listeners: 0, // Count of number of listeners.\n      };\n      originalFn.apply(scrollport, ['scroll', data.scrollListener]);\n      observed.set(scrollport, data);\n    }\n    data.listeners++;\n  }\n\n  function onRemoveListener(originalFn, type, handler) {\n    if (type != 'scroll' && type != 'scrollend')\n      return;\n    let scrollport = this;\n    let data = observed.get(scrollport);\n\n    // Mismatched addEventListener / removeEventListener\n    // TODO: Should we explicitly track added listeners to prevent this?\n    if (data === undefined)\n      return;\n\n    data[type]--;\n    // If there are still listeners, nothing more to do.\n    if (--data.listeners > 0)\n      return;\n\n    // Otherwise, remove the added listeners.\n    originalFn.apply(scrollport, ['scroll', data.scrollListener]);\n    observed.delete(scrollport);\n  }\n\n  observe(Element.prototype, 'addEventListener', onAddListener);\n  observe(window, 'addEventListener', onAddListener);\n  observe(document, 'addEventListener', onAddListener);\n  observe(Element.prototype, 'removeEventListener', onRemoveListener);\n  observe(window, 'removeEventListener', onRemoveListener);\n  observe(document, 'removeEventListener', onRemoveListener);\n  // TODO: Polyfill onscroll, onscrollend as well?\n}\n"],"names":["window","scrollendEvent","Event","proto","method","handler","native","args","Array","prototype","slice","apply","arguments","this","unshift","onAddListener","originalFn","type","options","scrollport","observed","get","undefined","data","timeout","scrollListener","evt","clearTimeout","setTimeout","dispatchEvent","listeners","set","onRemoveListener","delete","observe","Element","document"],"mappings":"AAEA,KAFkB,gBAAHA,QAEC,CACd,MAAMC,EAAiB,IAAIC,MAAM,aAGjC,MAAe,YAGf,WAAiBC,EAAOC,EAAQC,GAC9B,IAAIC,EAASH,EAAMC,GACnBD,EAAMC,GAAU,WACd,IAAIG,EAAOC,MAAMC,UAAUC,MAAMC,MAAMC,UAAW,CAAC,IACnDN,EAAOK,MAAME,KAAMN,GACnBA,EAAKO,QAAQR,GACbD,EAAQM,MAAME,KAAMN,IAIxB,SAAAQ,EAAuBC,EAAYC,EAAMZ,EAASa,GAIhD,GAAY,UAARD,GAA4B,aAARA,EACtB,OAEF,IAAcE,EAAGN,OACNO,EAASC,IAAIF,GACxB,QAAaG,IAATC,EAAoB,CACtB,IAAWC,EAAG,EACdD,EAAO,CACLE,eAAiBC,IACfC,aAAaH,GACbA,EAAUI,WAAW,KACnBT,EAAWU,cAAc5B,GACzBuB,EAAU,GACT,MAELM,UAAW,GAEbd,EAAWL,MAAMQ,EAAY,CAAC,SAAUI,EAAKE,iBAC7CL,EAASW,IAAIZ,EAAYI,GAE3BA,EAAKO,YAGP,SAASE,EAAiBhB,EAAYC,EAAMZ,GAC1C,GAAY,UAARY,GAA4B,aAARA,EACtB,OACF,IAAcE,EAAGN,KACTU,EAAGH,EAASC,IAAIF,QAIXG,IAATC,IAGJA,EAAKN,OAECM,EAAKO,UAAY,IAIvBd,EAAWL,MAAMQ,EAAY,CAAC,SAAUI,EAAKE,iBAC7CL,EAASa,OAAOd,KAGlBe,EAAQC,QAAQ1B,UAAW,mBAAoBM,GAC/CmB,EAAQlC,OAAQ,mBAAoBe,GACpCmB,EAAQE,SAAU,mBAAoBrB,GACtCmB,EAAQC,QAAQ1B,UAAW,sBAAuBuB,GAClDE,EAAQlC,OAAQ,sBAAuBgC,GACvCE,EAAQE,SAAU,sBAAuBJ"}